{"version":3,"sources":["Graph.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["styles","container","maxHeight","maxWidth","margin","Graph","maxPrice","data","dataArr","i","length","price","toFixed","date","dayjs","format","push","Math","max","map","minMaxYValues","dataMax","Number","style","width","height","top","right","left","bottom","strokeDasharray","dataKey","interval","type","domain","stroke","fill","Button","period","setStartDate","children","onClick","Date","setDate","getDate","extend","advancedFormat","App","useState","startDate","today","dd","String","padStart","mm","getMonth","yyyy","getFullYear","endDate","setEndDate","coinData","setCoinData","isLoading","setIsLoading","error","setError","getCoinData","a","startDateUnix","endDateUnix","range","url","fetch","coinResponse","json","prices","useEffect","content","selected","onChange","selectsStart","selectsEnd","minDate","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c2b0bc85.chunk.js","sourcesContent":["import React from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\nimport dayjs from 'dayjs';\n\nconst styles = {\n    container: {\n        maxHeight: \"100vh\",\n        maxWidth: \"100vw\",\n        margin: \"0 auto\",\n    }\n};\n\nconst Graph = ({ data }) => {\n\n    let dataArr = [];\n    let maxPrice = 20000;\n\n    for ( let i = 0; i < data.length; i++) {\n        const price = data[i].[1].toFixed(4);\n        const date = dayjs(data[i].[0]).format('D/MMM/YY');\n\n        dataArr.push({\n            date,\n            price\n        });\n    };\n    maxPrice = Math.max(...dataArr.map(i => i.price), 0).toFixed();\n    // console.log('max:', maxPrice);\n    // console.log(\"dataArr:\", dataArr);\n    const minMaxYValues = [0, dataMax => (Number(maxPrice) + 500)];\n\n    return (\n        <div style={styles.container}>\n            <AreaChart width={800} height={400} data={dataArr}\n                margin={{ top: 20, right: 30, left: 20, bottom: 0 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <XAxis dataKey=\"date\" />\n                <YAxis interval={0} type=\"number\" domain={minMaxYValues}/>\n                <Area dataKey=\"price\" stroke='none' fill='#009FFF'/>\n            </AreaChart>\n        </div>\n    )\n}\n\nexport default Graph;\n","import React from 'react';\n\nconst Button = ({ period, setStartDate, children }) => {\n\n    const handleClick = () => {\n        const date = new Date();\n        const setDate = date.setDate(date.getDate() - period);\n        // console.log('Set new start date. # of days from today:', period);\n        setStartDate(new Date(setDate));\n    };\n\n    return (\n        <button \n            onClick={handleClick}\n            period={period}\n        >\n        {children}\n        </button>\n    )\n}\n\nexport default Button;\n","import React, { useEffect, useState } from 'react';\nimport dayjs from \"dayjs\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from 'react-loader-spinner';\nimport Graph from './Graph';\nimport Button from './Button';\nimport advancedFormat from \"dayjs/plugin/advancedFormat\";\ndayjs.extend(advancedFormat);\n\nconst APIURL = `https://api.coingecko.com/api/v3/`;\n\nconst styles = {\n  container: {\n    \"width\": \"800px\",\n    \"textAlign\": \"center\",\n    \"marginTop\": \"150px\",\n  }\n};\n\nfunction App() {\n  const [startDate, setStartDate] = useState(new Date('01/01/2020'));\n  let today = new Date();\n  const dd = String(today.getDate()).padStart(2, '0');\n  const mm = String(today.getMonth() + 1).padStart(2, '0');\n  const yyyy = today.getFullYear();\n\n  today = `${mm}/${dd}/${yyyy}`;\n  const [endDate, setEndDate] = useState(new Date(today));\n  // console.log(\"startDate:\", startDate);\n  // console.log(\"endDate:\", endDate);\n\n  // const startDate = \"1/1/2016\";\n  // const endDate = \"12/8/2020\";\n\n  const [coinData, setCoinData] = useState([]);\n  const [isLoading, setIsLoading] = useState([]);\n  const [error, setError] = useState(false);\n\n  const getCoinData = async (startDate, endDate) => {\n    setIsLoading(true);\n    const startDateUnix = dayjs(startDate).format('X');\n    const endDateUnix = dayjs(endDate).format('X');\n    // console.log(startDateUnix, endDateUnix);\n\n    const range = `range?vs_currency=usd&from=${startDateUnix}&to=${endDateUnix}`;\n    const url = `${APIURL}coins/bitcoin/market_chart/${range}`;\n    try {\n      const coinResponse = await fetch(url);\n      // console.log(url);\n      const data = await coinResponse.json();\n      // console.log(data);\n      setCoinData(data.prices);\n      setError(false);\n      setIsLoading(false)\n    } catch (e) {\n      setIsLoading(false);\n      setError(e);\n    }\n  }\n\n  useEffect( ()=>{\n    getCoinData(startDate, endDate);\n  }, [startDate, endDate])\n  // console.log(coinData);\n  \n  let content = 'No data';\n  if (coinData && coinData.length > 0)\n    content = 'Data Loaded';\n  if (isLoading) content = 'Loading...';\n  if (error) content = 'Oops... There\\'s an error';\n\n  const setDate = (date) => {\n    // console.log('New Start Date is:', date);\n    setStartDate(date);\n  };\n  \n\n  return (\n    <div>\n      <h1>BTC/USD</h1>\n      <div>Status: {content}</div>\n      <DatePicker\n        selected={startDate}\n        onChange={date => setStartDate(date)}\n        selectsStart\n        startDate={startDate}\n        endDate={endDate}\n      />\n      <DatePicker\n        selected={endDate}\n        onChange={date => setEndDate(date)}\n        selectsEnd\n        startDate={startDate}\n        endDate={endDate}\n        minDate={startDate}\n      />\n      <Button setStartDate={setDate} period={7}>7D</Button>\n      <Button setStartDate={setDate} period={30}>1M</Button>\n      <Button setStartDate={setDate} period={180}>6M</Button>\n      <Button setStartDate={setDate} period={365}>1Y</Button>\n      <Button setStartDate={setDate} period={1825}>5Y</Button>\n      <Button setStartDate={setDate} period={3650}>Max</Button>\n\n      {isLoading\n        ? <Loader\n          type=\"ThreeDots\" color=\"#009FFF\" height={80} width={80}\n          style={styles.container}\n        />\n        : <Graph data={coinData}/>\n        } \n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}